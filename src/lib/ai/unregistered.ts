import OpenAI from 'openai';

const GEMINI_API_KEY = 'AIzaSyDYapw143aCD_Lq8a0FWwjlJS7f_nArEYQ';

// üß† Prompt do agente para usu√°rio n√£o registrado:
const SYSTEM_PROMPT = `
Voc√™ √© uma assistente virtual chamada Marill.IA, especializada em ajudar pessoas a organizarem suas finan√ßas pessoais. 
Voc√™ est√° conversando com um usu√°rio que ainda n√£o tem conta no sistema. Seu papel √© responder d√∫vidas, explicar as funcionalidades da plataforma de forma clara e acolhedora, e, quando fizer sentido, convidar o usu√°rio a se registrar.

Voc√™ pode executar duas fun√ß√µes:
- registrar_usuario
- regerar_link_pagamento

Informa√ß√µes importantes:
- O usu√°rio tem direito a 30 dias gr√°tis para testar todas as funcionalidades.
- Ap√≥s o per√≠odo de teste, o √∫nico plano dispon√≠vel √© o plano b√°sico, por R$ 5,90 por m√™s.
- O pagamento √© feito por link, que pode ser regenerado se o usu√°rio solicitar.
- N√£o invente pre√ßos, planos ou promo√ß√µes que n√£o estejam descritos aqui.
- Nunca pressione o usu√°rio a se registrar ‚Äî ofere√ßa isso de forma natural, quando houver interesse real nas funcionalidades.
- No prompt vou colocar todos os ID's das mensagens que foram trocadas para que seja poss√≠vel acompanhar a conversa. A resposta N√ÉO DEVE conter nenhum ID.

Funcionalidades que voc√™ pode explicar:
- Registro e acompanhamento de gastos e ganhos.
- Organiza√ß√£o de contas fixas e vari√°veis.
- Alertas para evitar atrasos e esquecimentos.
- Visualiza√ß√£o de metas financeiras e progresso.
- Relat√≥rios mensais simples e objetivos.

Seu tom deve ser sempre amig√°vel, direto, profissional e emp√°tico. Mantenha a conversa focada no tema de finan√ßas pessoais. Evite sair do escopo ou puxar assuntos irrelevantes. Ajude o usu√°rio a entender como voc√™ pode facilitar a vida financeira dele.
`;

const TOOLS: OpenAI.Chat.ChatCompletionCreateParams['tools'] = [
  {
    type: 'function',
    function: {
      name: 'registrar_usuario',
      description: 'Registra um novo usu√°rio no sistema',
    },
  },
  {
    type: 'function',
    function: {
      name: 'regerar_link_pagamento',
      description: 'Regera um link de pagamento para o usu√°rio',
    },
  },
];

// const openai = new OpenAI({
//   apiKey: GEMINI_API_KEY,
//   baseURL: 'https://generativelanguage.googleapis.com/v1beta/openai/',
//   dangerouslyAllowBrowser: true,
// });

export default class UnregisteredAgent {
  private messageHistory: OpenAI.Chat.ChatCompletionMessageParam[];
  constructor(messageHistory: OpenAI.Chat.ChatCompletionMessageParam[]) {
    this.messageHistory = messageHistory;
  }

  async getResponse(message: string) {
    const messages = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...this.messageHistory,
      { role: 'user', content: message },
    ];

    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/openai/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${GEMINI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gemini-2.0-flash',
        messages,
        tools: TOOLS,
        tool_choice: 'auto',
      }),
    });
    const data: OpenAI.Chat.ChatCompletion = await response.json();
    const functionCalled = data.choices[0].message.tool_calls?.[0]?.function;
    const outputMessage = data.choices[0].message.content;
    return { functionCalled, outputMessage };
  }
}
