import OpenAI from 'openai';

const GEMINI_API_KEY = 'AIzaSyDYapw143aCD_Lq8a0FWwjlJS7f_nArEYQ';

// üß† Prompt do agente para usu√°rio n√£o registrado:
const SYSTEM_PROMPT = `
Voc√™ √© um assistente financeiro especializado em entender mensagens informais (geralmente enviadas por WhatsApp) que descrevem transa√ß√µes financeiras do usu√°rio. 
Seu objetivo √© interpretar corretamente essas mensagens, extrair os dados relevantes e chamar a fun√ß√£o apropriada com os par√¢metros corretos.

Voc√™ pode realizar uma das seguintes a√ß√µes:
- register_transaction: registrar uma nova transa√ß√£o (receita ou despesa)
- update_transaction: atualizar uma transa√ß√£o j√° existente
- cancel_transaction: cancelar uma transa√ß√£o registrada

Se faltar alguma informa√ß√£o essencial (como valor, data ou categoria), pergunte ao usu√°rio de forma objetiva antes de executar qualquer fun√ß√£o.

Regras importantes:
- Sempre que a data da transa√ß√£o n√£o for especificada, use a data e hora atual: *${new Date().toISOString()}*.
- Os usu√°rios podem se expressar de forma informal, com abrevia√ß√µes, emojis ou linguagem cotidiana. Seja flex√≠vel e inteligente ao interpretar essas mensagens.
- A descri√ß√£o da transa√ß√£o pode ser adaptada para torn√°-la mais leg√≠vel e padronizada, com base no conte√∫do da mensagem original.
- Apenas chame uma fun√ß√£o se tiver seguran√ßa sobre os dados. Se algo estiver vago ou amb√≠guo, pe√ßa confirma√ß√£o ao usu√°rio.
`;

const TOOLS: OpenAI.Chat.ChatCompletionCreateParams['tools'] = [
  {
    type: 'function',
    function: {
      name: 'register_transaction',
      description: 'Registra uma nova transa√ß√£o financeira do usu√°rio, como uma despesa ou receita',
      parameters: {
        type: 'object',
        properties: {
          tipo: {
            type: 'string',
            description: 'Tipo da transa√ß√£o. Pode ser "despesa" (sa√≠da de dinheiro) ou "receita" (entrada de dinheiro)',
            enum: ['despesa', 'receita'],
          },
          valor: {
            type: 'number',
            description: 'Valor num√©rico da transa√ß√£o. N√£o use s√≠mbolos como R$ ou v√≠rgulas.',
          },
          categoria: {
            type: 'string',
            description:
              'Categoria da transa√ß√£o. Deve ser uma entre: "alimenta√ß√£o", "transporte", "moradia", "sa√∫de", "lazer", "outros".',
            enum: ['alimenta√ß√£o', 'transporte', 'moradia', 'sa√∫de', 'lazer', 'outros'],
          },
          data: {
            type: 'string',
            description:
              'Data da transa√ß√£o no formato ISO 8601 (ex: 2025-05-07T14:30:00Z). Use a data atual se nenhuma data for fornecida.',
          },
          descricao: {
            type: 'string',
            description: 'Descri√ß√£o curta e clara da transa√ß√£o. Pode ser reescrita a partir da mensagem do usu√°rio.',
          },
          recorrente: {
            type: 'boolean',
            description: 'Indica se a transa√ß√£o se repete regularmente (ex: mensalmente).',
          },
        },
        required: ['tipo', 'valor', 'categoria', 'data', 'descricao', 'recorrente'],
      },
    },
  },
  {
    type: 'function',
    function: {
      name: 'update_transaction',
      description: 'Atualiza uma transa√ß√£o existente do usu√°rio. O ID deve estar dispon√≠vel no hist√≥rico da conversa.',
      parameters: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'ID da transa√ß√£o a ser atualizada. Deve ser obtido a partir do hist√≥rico.',
          },
          tipo: {
            type: 'string',
            description: 'Tipo atualizado da transa√ß√£o, se for o caso. Pode ser "despesa" ou "receita".',
            enum: ['despesa', 'receita'],
          },
          valor: {
            type: 'number',
            description: 'Valor atualizado da transa√ß√£o.',
          },
          categoria: {
            type: 'string',
            description:
              'Categoria atualizada. Deve ser uma entre: "alimenta√ß√£o", "transporte", "moradia", "sa√∫de", "lazer", "outros".',
            enum: ['alimenta√ß√£o', 'transporte', 'moradia', 'sa√∫de', 'lazer', 'outros'],
          },
          data: {
            type: 'string',
            description: 'Nova data da transa√ß√£o no formato ISO 8601, se for atualizada.',
          },
          descricao: {
            type: 'string',
            description: 'Nova descri√ß√£o da transa√ß√£o.',
          },
          recorrente: {
            type: 'boolean',
            description: 'Se a recorr√™ncia foi alterada, indique aqui.',
          },
        },
        required: ['id'],
      },
    },
  },
  {
    type: 'function',
    function: {
      name: 'cancel_transaction',
      description: 'Cancela uma transa√ß√£o existente do usu√°rio com base no ID registrado no hist√≥rico.',
      parameters: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'ID da transa√ß√£o a ser cancelada. Deve estar dispon√≠vel no hist√≥rico da conversa.',
          },
        },
        required: ['id'],
      },
    },
  },
];

export default class TransactionsAgent {
  private messageHistory: OpenAI.Chat.ChatCompletionMessageParam[];
  constructor(messageHistory: OpenAI.Chat.ChatCompletionMessageParam[]) {
    this.messageHistory = messageHistory;
  }

  async getResponse() {
    const messages = [{ role: 'system', content: SYSTEM_PROMPT }, ...this.messageHistory];

    const response = await fetch('https://generativelanguage.googleapis.com/v1beta/openai/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${GEMINI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gemini-2.0-flash',
        messages,
        tools: TOOLS,
        tool_choice: 'auto',
      }),
    });
    const data: OpenAI.Chat.ChatCompletion = await response.json();
    const functionCalled = data.choices[0].message.tool_calls?.[0]?.function;
    const outputMessage = data.choices[0].message.content;

    if (functionCalled) {
      return { functionCalled };
    }

    return { functionCalled, outputMessage };
  }
}
