import { capitalize } from 'lodash';
import OpenAI from 'openai';
import FunctionHandler from './base-handler';
import { recurringTransactionQueue } from '@/app/api/queues/recurring-transaction/route';

// üß† Prompt do agente para usu√°rio n√£o registrado:
const SYSTEM_PROMPT = `
Voc√™ √© um assistente financeiro que interpreta mensagens informais (geralmente enviadas por WhatsApp) com o objetivo de registrar, atualizar ou cancelar transa√ß√µes financeiras do usu√°rio.

Seu papel √© identificar com clareza as inten√ß√µes do usu√°rio e chamar **uma das fun√ß√µes abaixo**, preenchendo todos os campos necess√°rios com base na mensagem ou hist√≥rico recente da conversa:

- register_transaction
- update_transaction
- cancel_transaction
- update_recurring_transaction

As categorias dispon√≠veis s√£o: "alimenta√ß√£o", "transporte", "moradia", "sa√∫de", "lazer", "outros".

Regras de comportamento:

1. **Nunca pergunte o ID de uma transa√ß√£o**. Sempre recupere o ID do hist√≥rico de mensagens.
2. Se o usu√°rio n√£o informar sobre qual transa√ß√£o se trata, pegue a √∫ltima transa√ß√£o que voc√™s conversaram sobre na conversa.
2. Sempre assuma alguma categoria e data para o registro de uma tracanansa√ß√£o, mesmo que o usu√°rio n√£o tenha fornecido. *Fa√ßa seu melhor chute*. N√£o fique perguntando por confirma√ß√£o.
3. Se o usu√°rio disser algo como ‚Äúcancela isso‚Äù, assuma que ele se refere √† **√∫ltima transa√ß√£o registrada**, e chame "cancel_transaction" com o ID correspondente.
4. Sempre que o usu√°rio n√£o informar a data da transa√ß√£o, use a data e hora atual.
5. Adapte a **descri√ß√£o da transa√ß√£o** para torn√°-la mais leg√≠vel, mesmo que o usu√°rio tenha enviado algo abreviado, informal ou confuso.
6. Seja flex√≠vel: o usu√°rio pode usar emojis, g√≠rias ou linguagem cotidiana. Seu papel √© interpretar corretamente.

Seja objetivo, √∫til e mantenha sempre o foco em finan√ßas pessoais.
`;

// const GPT_PROMPT = `
// Voc√™ √© um assistente financeiro especializado em interpretar mensagens informais (principalmente via WhatsApp) para registrar, atualizar ou cancelar transa√ß√µes financeiras do usu√°rio. Seu objetivo √© identificar com clareza a inten√ß√£o do usu√°rio e chamar **uma das fun√ß√µes abaixo**, preenchendo todos os campos obrigat√≥rios utilizando informa√ß√µes da mensagem ou, quando necess√°rio, do hist√≥rico recente da conversa.

// Antes de escolher a fun√ß√£o e preencher seus argumentos, **reflita sempre explicitamente sobre:**
// - Quais pistas ou dados relevantes existem na mensagem enviada pelo usu√°rio.
// - Como voc√™ interpreta emojis, abrevia√ß√µes, g√≠rias ou instru√ß√µes amb√≠guas.
// - Como voc√™ deduz categoria, data, descri√ß√£o e demais campos obrigat√≥rios, mesmo quando n√£o est√£o expl√≠citos.
// - O racional por tr√°s de qualquer suposi√ß√£o feita (por exemplo: ‚Äúassumi categoria ‚Äòalimenta√ß√£o‚Äô porque o usu√°rio mencionou pizza‚Äù).

// **Nunca antecipe a conclus√£o (fun√ß√£o escolhida e campos preenchidos) antes do seu racioc√≠nio detalhado. O racioc√≠nio deve sempre preceder a resposta final.**

// As fun√ß√µes dispon√≠veis s√£o:
// - register_transaction
// - update_transaction
// - cancel_transaction
// - update_recurring_transaction

// As categorias dispon√≠veis s√£o: "alimenta√ß√£o", "transporte", "moradia", "sa√∫de", "lazer", "outros".

// # Regras de comportamento

// 1. **Nunca pergunte o ID de uma transa√ß√£o**. Sempre recupere o ID do hist√≥rico de mensagens.
// 2. Se o usu√°rio n√£o informar sobre qual transa√ß√£o se trata, pegue a √∫ltima transa√ß√£o que conversaram na conversa.
// 3. Sempre assuma alguma categoria e data ao registrar transa√ß√µes, mesmo que o usu√°rio n√£o forne√ßa. Fa√ßa seu melhor chute, sem solicitar confirma√ß√£o.
// 4. Se o usu√°rio disser algo como ‚Äúcancela isso‚Äù, assuma que √© a **√∫ltima transa√ß√£o registrada** e chame "cancel_transaction" com o ID correspondente.
// 5. Sempre que o usu√°rio n√£o informar a data da transa√ß√£o, use a data e hora atual.
// 6. Adapte a **descri√ß√£o da transa√ß√£o** para torn√°-la mais leg√≠vel, interpretando abrevia√ß√µes ou informalidades.
// 7. Seja flex√≠vel: interprete corretamente emojis, g√≠rias ou linguagem informal.
// 8. Seja objetivo, √∫til e foque sempre em finan√ßas pessoais.

// # Steps

// 1. Leia e interprete a mensagem.
// 2. Liste explicitamente as informa√ß√µes detectadas, infer√™ncias, eventuais ambiguidades e suposi√ß√µes feitas.
// 3. Somente depois, aponte:
//    - A fun√ß√£o escolhida.
//    - Os campos e valores preenchidos, incluindo o racional para cada decis√£o.

// # Output Format

// Retorne um objeto JSON com dois campos:
// - "raciocinio": (string, em portugu√™s) Sua explica√ß√£o detalhada do processo de interpreta√ß√£o, extra√ß√£o de informa√ß√µes, suposi√ß√µes e justificativas.
// - "acao": outro objeto, contendo:
// - "funcao": (string) Nome da fun√ß√£o escolhida.
// - "campos": (objeto JSON) Campos obrigat√≥rios da fun√ß√£o e seus valores preenchidos.

// Jamais utilize blocos de c√≥digo.

// # Examples

// Exemplo 1:

// Mensagem do usu√°rio: "anota a√≠, gastei 30 no burger üçî"

// Resposta:
// {
//   "raciocinio": "O usu√°rio usou linguagem informal e emoji de hamb√∫rguer para indicar uma despesa em alimenta√ß√£o. N√£o mencionou data, ent√£o utilizo a data e hora atual. Valor √© 30. Descri√ß√£o adaptada para 'Compra de hamb√∫rguer'. Categoria definida como 'alimenta√ß√£o'.",
//   "acao": {
//     "funcao": "register_transaction",
//     "campos": {
//       "descricao": "Compra de hamb√∫rguer",
//       "valor": 30,
//       "data": "[DATA_ATUAL]",
//       "categoria": "alimenta√ß√£o"
//     }
//   }
// }

// Exemplo 2:

// Mensagem do usu√°rio: "cancela isso"

// (Supondo que a √∫ltima transa√ß√£o discutida tem ID "TDSYD")

// Resposta:
// {
//   "raciocinio": "O usu√°rio pediu para cancelar algo sem especificar, usando linguagem vaga. Pela regra 4, assumo que se refere √† √∫ltima transa√ß√£o registrada, e recupero o ID do hist√≥rico.",
//   "acao": {
//     "funcao": "cancel_transaction",
//     "campos": {
//       "id": "TDSYD"
//     }
//   }
// }

// # Notes

// - Se o contexto n√£o permitir inferir claramente algum campo, adote a alternativa mais plaus√≠vel com base nas mensagens recentes, nunca deixando campos em branco.
// - Garanta que todo racioc√≠nio venha sempre antes da proposta de a√ß√£o conclusiva.
// `
// ---

// ### Exemplos de conversas

// #### ‚úÖ Exemplo 1 ‚Äî Registro de despesa

// - Usu√°rio: Almocei hoje, deu 42 reais
// - IA: ‚Üí Chamar "register_transaction"
// - IA:
// Transa√ß√£o registrada! Confira os detalhes:

// *#5O18S19U*
// Valor: *R$ 42.00*
// Categoria: *Alimenta√ß√£o*
// Data: 08/05/2025, 13:38
// Descri√ß√£o: Almo√ßo

// ---

// #### ‚úÖ Exemplo 3 ‚Äî Atualiza√ß√£o de valor

// - Usu√°rio: fatura da internet de 99
// - IA: ‚Üí Chamar "register_transaction"
// - IA:
// Transa√ß√£o registrada! Confira os detalhes:

// *#A2PJU*
// Valor: *R$ 99.00*
// Categoria: *Moradia*
// Data: 08/05/2025, 13:38
// Descri√ß√£o: Pagamento da fatura de internet

// - Usu√°rio: Na verdade foi 115
// - IA: ‚Üí Chamar "update_transaction" com ID da transa√ß√£o #A2PJU
// - IA:
// Transa√ß√£o atualizada! Confira os detalhes:

// *#A2PJU*
// Valor: *R$ 115.00*
// Categoria: *Moradia*
// Data: 08/05/2025, 13:38
// Descri√ß√£o: Pagamento da fatura de internet

// ---

// ####
// ‚úÖ Exemplo 4.1 ‚Äî Cancelamento

// - Usu√°rio: almo√ßei no mequi 37
// - IA: ‚Üí Chamar "register_transaction"
// - IA:
// Transa√ß√£o registrada! Confira os detalhes:

// *#5O18S19U*
// Valor: *R$ 37.00*
// Categoria: *Alimenta√ß√£o*
// Data: 08/05/2025, 13:38
// Descri√ß√£o: Almo√ßo no mequi

// - Usu√°rio: cancela isso a√≠
// - IA: ‚Üí Chamar "cancel_transaction" com ID da transa√ß√£o #5O18S19U
// - IA: Prontinho! Cancelei a transa√ß√£o *#5O18S19U* pra voc√™.

// ---

// #### ‚úÖ Exemplo 5 ‚Äî Faltando dados

// Usu√°rio: Gastei 30 ontem
// IA: Pode me dizer o que foi esse gasto? Assim consigo classificar direitinho üòâ
// Usu√°rio: Almo√ßo no mequi
// ‚Üí Chamar "register_transaction"

// ---
// A data atual √© *${new Date().toISOString()}* e hoje √© um dia de **${new Date().toLocaleDateString('pt-BR', { weekday: 'long' })}**.

const TOOLS: OpenAI.Responses.ResponseCreateParams['tools'] = [
  {
    type: 'function',
    name: 'register_transaction',
    description: 'Registra uma nova transa√ß√£o financeira do usu√°rio, como uma despesa ou receita',
    strict: false,
    parameters: {
      type: 'object',
      properties: {
        tipo: {
          type: 'string',
          description: 'Tipo da transa√ß√£o. Pode ser "despesa" (sa√≠da de dinheiro) ou "receita" (entrada de dinheiro)',
          enum: ['despesa', 'receita'],
        },
        valor: {
          type: 'number',
          description: 'Valor num√©rico da transa√ß√£o. N√£o use s√≠mbolos como R$ ou v√≠rgulas.',
        },
        categoria: {
          type: 'string',
          description:
            'Categoria da transa√ß√£o. Deve ser uma entre: "alimenta√ß√£o", "transporte", "moradia", "sa√∫de", "lazer", "outros".',
          enum: ['alimenta√ß√£o', 'transporte', 'moradia', 'sa√∫de', 'lazer', 'outros'],
        },
        data: {
          type: 'string',
          description:
            'Data da transa√ß√£o no formato ISO 8601 (ex: 2025-05-07T14:30:00Z). Use a data atual se nenhuma data for fornecida.',
        },
        descricao: {
          type: 'string',
          description: 'Descri√ß√£o curta e clara da transa√ß√£o. Pode ser reescrita a partir da mensagem do usu√°rio.',
        },
        recorrente: {
          type: 'boolean',
          description:
            'Indica se a transa√ß√£o se repete regularmente (ex: mensalmente). Se true, DEVE ser informado o campo "frequencia" e "primeira_cobranca".',
        },
        frequencia: {
          type: 'string',
          description: 'Frequ√™ncia de recorr√™ncia da transa√ß√£o. Pode ser "di√°ria", "semanal", "mensal" ou "anual".',
          enum: ['di√°ria', 'semanal', 'mensal', 'anual'],
        },
        primeira_cobranca: {
          type: 'string',
          description:
            'Data da primeira cobran√ßa da transa√ß√£o recorrente. Deve ser no formato ISOString. Se o usu√°rio n√£o informar, use a hora atual. Se a data for no passado, coloque a data da pr√≥xima cobran√ßa.',
        },
      },
      required: ['tipo', 'valor', 'categoria', 'data', 'descricao', 'recorrente'],
      additionalProperties: false,
    },
  },
  {
    type: 'function',
    name: 'update_transaction',
    description: 'Atualiza uma transa√ß√£o existente do usu√°rio. O ID deve estar dispon√≠vel no hist√≥rico da conversa.',
    strict: false,
    parameters: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          description: 'ID da transa√ß√£o a ser atualizada. Deve ser obtido a partir do hist√≥rico.',
        },
        tipo: {
          type: 'string',
          description: 'Tipo atualizado da transa√ß√£o, se for o caso. Pode ser "despesa" ou "receita".',
          enum: ['despesa', 'receita'],
        },
        valor: {
          type: 'number',
          description: 'Valor atualizado da transa√ß√£o.',
        },
        categoria: {
          type: 'string',
          description:
            'Categoria atualizada. Deve ser uma entre: "alimenta√ß√£o", "transporte", "moradia", "sa√∫de", "lazer", "outros".',
          enum: ['alimenta√ß√£o', 'transporte', 'moradia', 'sa√∫de', 'lazer', 'outros'],
        },
        data: {
          type: 'string',
          description: 'Nova data da transa√ß√£o no formato ISO 8601, se for atualizada.',
        },
        descricao: {
          type: 'string',
          description: 'Nova descri√ß√£o da transa√ß√£o.',
        },
      },
      required: ['id'],
      additionalProperties: false,
    },
  },
  {
    type: 'function',
    name: 'cancel_transaction',
    description: 'Cancela uma transa√ß√£o existente do usu√°rio com base no ID registrado no hist√≥rico.',
    strict: true,
    parameters: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          description: 'ID da transa√ß√£o a ser cancelada. Deve estar dispon√≠vel no hist√≥rico da conversa.',
        },
      },
      required: ['id'],
      additionalProperties: false,
    },
  },
  {
    type: 'function',
    name: 'update_recurring_transaction',
    description:
      'Atualiza uma transa√ß√£o recorrente existente do usu√°rio. O ID deve estar dispon√≠vel no hist√≥rico da conversa.',
    strict: false,
    parameters: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          description: 'ID da transa√ß√£o recorrente a ser atualizada. Deve estar dispon√≠vel no hist√≥rico da conversa.',
        },
        valor: {
          type: 'number',
          description: 'Valor atualizado da transa√ß√£o.',
        },
        categoria: {
          type: 'string',
          description: 'Categoria atualizada.',
          enum: ['alimenta√ß√£o', 'transporte', 'moradia', 'sa√∫de', 'lazer', 'outros'],
        },
        data: {
          type: 'string',
          description: 'Nova data da transa√ß√£o no formato ISO 8601, se for atualizada.',
        },
        descricao: {
          type: 'string',
          description: 'Nova descri√ß√£o da transa√ß√£o.',
        },
        frequencia: {
          type: 'string',
          description: 'Frequ√™ncia de recorr√™ncia da transa√ß√£o. Pode ser "di√°ria", "semanal", "mensal" ou "anual".',
          enum: ['di√°ria', 'semanal', 'mensal', 'anual'],
        },
      },
      required: ['id'],
      additionalProperties: false,
    },
  },
];

const client = new OpenAI({
  apiKey: process.env.OPEN_AI_API_KEY,
});

export default class TransactionsAgent {
  private messageHistory: OpenAI.Responses.ResponseInputItem[];

  constructor(messageHistory: OpenAI.Responses.ResponseInputItem[]) {
    this.messageHistory = messageHistory;

    // Joga a informa√ß√£o de data atual na √∫ltima mensagem pra n√£o matar a fun√ß√£o de caching do gpt
    // @ts-expect-error A √∫ltima sempre vai ser mensagem.
    this.messageHistory[0].content += `\n A data atual √© *${new Date().toISOString()}* e hoje √© um dia de **${new Date().toLocaleDateString('pt-BR', { weekday: 'long' })}**.`;
  }

  async getResponse(serverHandler: FunctionHandler) {
    const body: OpenAI.Responses.ResponseCreateParams = {
      model: 'gpt-4.1-nano',
      instructions: SYSTEM_PROMPT,
      input: this.messageHistory,
      tools: TOOLS,
      tool_choice: 'auto',
    };

    const response = await client.responses.create(body);
    const tokens = response.usage?.total_tokens ?? 0;

    // We should make sure chatgpt is not calling any function twice
    const uniqueOutputs = [...new Set(response.output.map((output) => JSON.stringify(output)))];
    const uniqueOutputsObject: typeof response.output = uniqueOutputs.map((output) => JSON.parse(output));
    for (const output of uniqueOutputsObject) {
      if (output.type === 'function_call') {
        const transactionsHandler = new TransactionsHandler(serverHandler);
        await transactionsHandler.handleFunctionCall(output);
      }
      if (output.type === 'message' && output.content[0].type === 'output_text') {
        await serverHandler.sendMessage(output.content[0].text);
      }
    }

    return tokens;
  }
}

type Transaction = {
  id?: string;
  tipo: string;
  valor: number;
  categoria: string;
  data: string;
  descricao: string;
  recorrente: boolean;
  frequencia?: string;
  primeira_cobranca?: string;
};

const DAY_IN_MS = 1000 * 60 * 60 * 24;
const frequencias = {
  di√°ria: DAY_IN_MS,
  semanal: DAY_IN_MS * 7,
  mensal: DAY_IN_MS * 30,
  anual: DAY_IN_MS * 365,
};

export class TransactionsHandler {
  constructor(private serverHandler: FunctionHandler) {}

  handleFunctionCall(functionCalled: { name: string; arguments: string }) {
    const parsedArguments = JSON.parse(functionCalled.arguments);
    // Tira o # da frente do ID, caso a IA tenha colocado
    if (parsedArguments.id && parsedArguments.id.startsWith('#')) {
      parsedArguments.id = parsedArguments.id.slice(1);
    }

    switch (functionCalled.name) {
      case 'register_transaction':
        if (parsedArguments.recorrente) {
          return this.registerRecurringTransaction(parsedArguments);
        }
        return this.registerTransaction(parsedArguments);
      case 'update_transaction':
        return this.updateTransaction(parsedArguments);
      case 'update_recurring_transaction':
        return this.updateRecurringTransaction(parsedArguments);
      case 'cancel_transaction':
        return this.cancelTransaction(parsedArguments.id);
      default:
        throw new Error('Invalid function name');
    }
  }
  // HANDLERS
  async registerTransaction(transaction: Transaction) {
    this.logger('Registering transaction', 'info');
    const { data: registeredTransaction, error } = await this.serverHandler.supabase
      .from('transactions')
      .insert({
        user_id: this.serverHandler.user!.id,
        categoria: transaction.categoria,
        valor: transaction.valor,
        data: transaction.data,
        descricao: transaction.descricao,
      })
      .select()
      .single();

    if (!registeredTransaction) {
      await this.serverHandler.sendMessage(
        'N√£o foi poss√≠vel registrar a transa√ß√£o. Tente novamente mais tarde ou entre em contato com o suporte.',
      );
      return this.logger(error.message, 'error');
      // throw new Error('Failed to register transaction');
    }

    const beautifiedTransaction = TransactionsHandler.beautifyTransaction(registeredTransaction);
    await this.serverHandler.sendMessage(beautifiedTransaction);
  }

  async registerRecurringTransaction(transaction: Transaction) {
    this.logger('Registering recurring transaction', 'info');
    if (!transaction.frequencia) {
      throw new Error('Frequ√™ncia is required');
    }
    const { data: recurringTransaction, error } = await this.serverHandler.supabase
      .from('recurring_transactions')
      .insert({
        user_id: this.serverHandler.user!.id,
        categoria: transaction.categoria,
        valor: transaction.valor,
        descricao: transaction.descricao,
        frequencia: transaction.frequencia,
      })
      .select()
      .single();

    if (!recurringTransaction) {
      await this.serverHandler.sendMessage(
        'N√£o foi poss√≠vel registrar a transa√ß√£o recorrente. Tente novamente mais tarde ou entre em contato com o suporte.',
      );
      return this.logger(error.message, 'error');
    }

    const firstChargeDate = TransactionsHandler.dataPrimeiraCobranca(
      transaction.primeira_cobranca,
      transaction.frequencia,
    );

    recurringTransactionQueue.enqueue(recurringTransaction, {
      id: String(recurringTransaction.id),
      runAt: firstChargeDate,
      repeat: {
        every: frequencias[transaction.frequencia as keyof typeof frequencias],
      },
    });

    await this.serverHandler.sendMessage(TransactionsHandler.beautifyRecurringTransaction(recurringTransaction));
  }

  async updateRecurringTransaction(transaction: Partial<Transaction>) {
    this.logger('Updating recurring transaction #' + transaction.id, 'info');
    if (!transaction.id) {
      this.logger('Transaction ID is required', 'error');
      await this.serverHandler.sendMessage(
        'N√£o foi poss√≠vel atualizar a transa√ß√£o. Tente novamente mais tarde ou entre em contato com o suporte.',
      );
      return;
    }
    const { data: updatedTransaction, error } = await this.serverHandler.supabase
      .from('recurring_transactions')
      .update(transaction)
      .eq('id', transaction.id)
      .select()
      .single();

    if (!updatedTransaction) {
      await this.serverHandler.sendMessage(
        'N√£o foi poss√≠vel atualizar a transa√ß√£o. Tente novamente mais tarde ou entre em contato com o suporte.',
      );
      return this.logger(error.message, 'error');
    }

    await this.serverHandler.sendMessage(TransactionsHandler.beautifyRecurringTransaction(updatedTransaction, true));
  }

  async updateTransaction(transaction: Partial<Transaction>) {
    this.logger('Updating transaction #' + transaction.id, 'info');
    if (!transaction.id) {
      this.logger('Transaction ID is required', 'error');
      throw new Error('Transaction ID is required');
    }

    const { data: updatedTransaction, error } = await this.serverHandler.supabase
      .from('transactions')
      .update(transaction)
      .eq('id', transaction.id)
      .select()
      .single();

    if (!updatedTransaction) {
      await this.serverHandler.sendMessage(
        'N√£o foi poss√≠vel atualizar a transa√ß√£o. Tente novamente mais tarde ou entre em contato com o suporte.',
      );
      console.log(transaction);
      return this.logger(error.message, 'error');
    }

    const beautifiedTransaction = TransactionsHandler.beautifyTransaction(updatedTransaction, true);
    await this.serverHandler.sendMessage(beautifiedTransaction);
  }

  async cancelTransaction(id: string) {
    this.logger('Cancelling transaction #' + id, 'info');
    const { error } = await this.serverHandler.supabase.from('transactions').delete().eq('id', id);

    if (error) {
      await this.serverHandler.sendMessage(
        'N√£o foi poss√≠vel cancelar a transa√ß√£o. Tente novamente mais tarde ou entre em contato com o suporte.',
      );
      return this.logger(error.message, 'error');
    }

    await this.serverHandler.sendMessage(`Transa√ß√£o #${id} cancelada com sucesso!`);
  }

  static beautifyTransaction(transaction: Partial<Transaction>, update = false) {
    return `
Transa√ß√£o ${update ? 'atualizada' : 'registrada'}! Confira os detalhes:

*#${transaction.id}*
Valor: *R$ ${transaction.valor?.toFixed(2)}*
Categoria: *${capitalize(transaction.categoria)}*
Data: ${new Date(transaction?.data || new Date()).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo', dateStyle: 'short', timeStyle: 'short' })}
Descri√ß√£o: ${capitalize(transaction.descricao)}
    `.trim();
  }

  static beautifyRecurringTransaction(transaction: Partial<Transaction>, update = false) {
    const firstChargeDate = transaction.primeira_cobranca
      ? new Date(transaction.primeira_cobranca).toLocaleString('pt-BR', {
          timeZone: 'America/Sao_Paulo',
          dateStyle: 'short',
          timeStyle: 'short',
        })
      : 'Agora';

    return `
Transa√ß√£o recorrente ${update ? 'atualizada' : 'registrada'}! Confira os detalhes:

*#${transaction.id}*
Valor: *R$ ${transaction.valor?.toFixed(2)}*
Categoria: *${capitalize(transaction.categoria)}*
Descri√ß√£o: ${capitalize(transaction.descricao)}
Frequ√™ncia: *${capitalize(transaction.frequencia)}*
Data da primeira cobran√ßa: ${firstChargeDate}
    `.trim();
  }

  static dataPrimeiraCobranca(date: string | undefined, frequencia: string) {
    if (!date) {
      return undefined;
    }

    // Se a frequ√™ncia n√£o for di√°ria, coloca a hora pra 15h
    const firstChargeDate = new Date(frequencia === 'di√°ria' ? date : date.split('T')[0] + 'T15:00:00Z');

    if (firstChargeDate > new Date()) {
      return firstChargeDate;
    }

    // Se for um momento muito pr√≥ximo (menos que 1min), retorna undefined
    if (Math.abs(firstChargeDate.getTime() - new Date().getTime()) < 1000 * 60) {
      return undefined;
    }

    // Aumenta pelo tempo de recorr√™ncia at√© achar uma data futura
    while (firstChargeDate < new Date()) {
      if (frequencia === 'di√°ria' || frequencia === 'semanal') {
        firstChargeDate.setTime(firstChargeDate.getTime() + frequencias[frequencia as keyof typeof frequencias]);
      } else if (frequencia === 'mensal') {
        firstChargeDate.setMonth(firstChargeDate.getMonth() + 1);
      } else if (frequencia === 'anual') {
        firstChargeDate.setFullYear(firstChargeDate.getFullYear() + 1);
      }
    }

    return firstChargeDate;
  }

  static dataProximaCobranca(date: string, frequencia: string) {
    const firstChargeDate = new Date(date);
    if (frequencia === 'di√°ria' || frequencia === 'semanal') {
      firstChargeDate.setTime(firstChargeDate.getTime() + frequencias[frequencia as keyof typeof frequencias]);
    } else if (frequencia === 'mensal') {
      firstChargeDate.setMonth(firstChargeDate.getMonth() + 1);
    } else if (frequencia === 'anual') {
      firstChargeDate.setFullYear(firstChargeDate.getFullYear() + 1);
    }

    return firstChargeDate;
  }

  logger(message: string, level: 'log' | 'info' | 'error' = 'log') {
    console[level]('\x1b[34m TRANSACTIONS HANDLER: \x1b[0m ', message);
  }
}
